<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Geek w/ god complex</title>
    <link>https://blog.nicro.land/tags/python/</link>
    <description>Recent content in Python on Geek w/ god complex</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Jan 2016 23:32:58 +0000</lastBuildDate>
    <atom:link href="https://blog.nicro.land/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nested decorator functions in Python</title>
      <link>https://blog.nicro.land/2016/01/20/nested-decorator-functions-in-python/</link>
      <pubDate>Wed, 20 Jan 2016 23:32:58 +0000</pubDate>
      <guid>https://blog.nicro.land/2016/01/20/nested-decorator-functions-in-python/</guid>
      <description>&lt;p&gt;When I was at &lt;a href=&#34;https://python.ie/previous-pycons/pycon-2015/&#34;&gt;PyConIE last October&lt;/a&gt; I was talking with an old friend about Python&amp;rsquo;s decorator functions.&lt;/p&gt;&#xA;&lt;p&gt;He lamented how you need to google around for tutorials any time you wanted to write a parametrised decorator because it can be so confusing. I told him that there was a way to do it by nesting decorator functions which is much simpler than implementing them using classes (which seems to be the widely known about way).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Ramblings from a Python Dev</title>
      <link>https://blog.nicro.land/2015/09/07/golang-ramblings-from-a-python-dev/</link>
      <pubDate>Mon, 07 Sep 2015 07:28:17 +0000</pubDate>
      <guid>https://blog.nicro.land/2015/09/07/golang-ramblings-from-a-python-dev/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been spending time lately learning Go and I thought I&amp;rsquo;d throw some of my thoughts down here. As the title implies my experience is mostly in Python so expect lots of apples to oranges comparisons!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;5 year anniversary pic, taken from the golang blog&#34; src=&#34;https://blog.golang.org/5years/gophers5th.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;&#xA;&lt;p&gt;I guess the first thing that jumps out is the quality of the tooling, I&amp;rsquo;ve only had a chance to play around with a few of the CLI&amp;rsquo;s features but already I&amp;rsquo;m impressed with how simple it makes some day to day things.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weekly Notes – 26/7/15</title>
      <link>https://blog.nicro.land/2015/07/26/weekly-notes-26715/</link>
      <pubDate>Sun, 26 Jul 2015 12:06:03 +0000</pubDate>
      <guid>https://blog.nicro.land/2015/07/26/weekly-notes-26715/</guid>
      <description>&lt;h3 id=&#34;setuppy-and-rpmspec&#34;&gt;&lt;code&gt;setup.py&lt;/code&gt; and &lt;code&gt;rpm.spec&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;https://rkuska.fedorapeople.org/pyp2rpm.png&#34; src=&#34;https://rkuska.fedorapeople.org/pyp2rpm.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;So recently at work I needed to package a tool we wrote at work. The tool was written in Python (big surprise) and it was designed to be run as a daemon so it had an init-script.&lt;/p&gt;&#xA;&lt;p&gt;Python tools are generally packaged by writing a &lt;code&gt;setup.py&lt;/code&gt; script. There are actually a number of tools you can use (I&amp;rsquo;ve used &lt;code&gt;distutils&lt;/code&gt; and &lt;code&gt;setuptools&lt;/code&gt; in the past) and there&amp;rsquo;s a bit of a confusing &lt;a href=&#34;https://stackoverflow.com/a/14753678&#34;&gt;history regarding which tool is recommended&lt;/a&gt;. I mostly use &lt;code&gt;setuptools&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
